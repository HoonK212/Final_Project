<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="MYPAGE">

	<resultMap type="map" id="orderdata">
		<result column="rnum" property="rnum"/>
		<result column="no" property="op_no"/>
		<result column="orders_no" property="o_no"/>
		<result column="amount" property="amount"/>
		<result column="point" property="point"/>
		<result column="code" property="code"/>
		<result column="id" property="id"/>
		<result column="dates" property="dates"/>
		<result column="status" property="status"/>
		<result column="name" property="name"/>
		<result column="price" property="price"/>
		<result column="renamed" property="renamed"/>
		<result column="ext" property="ext"/>
		<result column="thumbnail" property="thumbnail"/>
	</resultMap>
	
	<resultMap type="map" id="goal">
		<result column="id" property="id" />
		<result column="days" property="days" />
		<result column="exercises" property="exercises" />
		<result column="grade" property="grade" />
	</resultMap>
	
	<insert id="setGoal">
		INSERT INTO GOAL 
		VALUES ( #{id}, #{days}, #{exercise}, #{grade} ) 
	</insert>
	
	<update id="updateGoal">
		UPDATE GOAL
		SET DAYS = #{days}, EXERCISES = #{exercise}, GRADE = #{grade}
		WHERE ID = #{id}
	</update>
	
	<select id="selectOrderList" resultMap="orderdata">
		SELECT * FROM ( SELECT ROWNUM RNUM, A.* FROM (
		SELECT OP.*, O.ID, O.DATES, P.NAME, P.PRICE, F.RENAMED, F.EXT, F.THUMBNAIL
		FROM ORDER_PRODUCT OP, ORDERS O, PRODUCT P, FILES F
		WHERE OP.ORDERS_NO = O.NO
		AND OP.CODE = P.CODE
		AND OP.CODE = F.REF
		AND F.THUMBNAIL = 1
		AND ID = #{id} 
		ORDER BY O.DATES DESC)A
		) WHERE RNUM BETWEEN #{page.start} AND #{page.end}
	</select>
	
	<select id="selectOrderCnt" resultType="int">
		SELECT COUNT(*) FROM (
		SELECT OP.*, O.ID, O.DATES, P.NAME, P.PRICE, F.RENAMED, F.EXT, F.THUMBNAIL
		FROM ORDER_PRODUCT OP, ORDERS O, PRODUCT P, FILES F
		WHERE OP.ORDERS_NO = O.NO
		AND OP.CODE = P.CODE
		AND OP.CODE = F.REF
		AND F.THUMBNAIL = 1
		AND ID = #{id} )
	</select>
	
	<update id="cancelOrder">
		UPDATE ORDER_PRODUCT SET STATUS = 4
		WHERE NO = #{op_no}
	</update>
	
	<insert id="submitReturn">
		INSERT INTO RETURN (OP_NO, REASON)
		VALUES (#{op_no}, #{reason})
	</insert>
	
	<insert id="insertReview">
		INSERT INTO REVIEW (OP_NO, SCORE, REVIEW)
		VALUES (#{op_no}, #{score}, #{review})
	</insert>
	
	<select id="selectOrderAmountCnt" resultType="int">
		SELECT sum(amount) FROM ORDER_PRODUCT
		WHERE STATUS NOT IN (4, 6) 
		AND ORDERS_NO in (SELECT NO FROM ORDERS WHERE ID= #{id})
	</select>
	
	<select id="selectExerciseGoal" resultMap="goal">
		SELECT * FROM GOAL
		WHERE ID = #{id}
	</select>
	
	
	<!-- 세민 -->
	
	<!-- 메일이 중복 되는지 확인하는 메소드  -->
   <select id="chMail" resultType="int">
      select count(*) from users
      where mail=#{mail}
   </select>
   
   <!-- 닉니임이 중복 되는지 확인하는 메소드  -->
   <select id="chNick" resultType="int">
      select count(*) from users
      where nick=#{nick}
   </select>
   
   <!-- 계좌가 중복 되는지 확인하는 메소드  -->
   <select id="chAccount" resultType="int">
      select count(*) from account
      where account=#{account}
   </select>
   
   <!-- 회원정보업데이트   -->
   <update id="updateUserInfo">
      update users set pw = #{pw} , nick=#{nick}, mail = #{mail}, tel = #{tel}, addr= #{addr}, post = #{post}
      where id = #{id}
   </update>
   
   <!-- 기존에 계좌가 있는지 확인하는메소드  -->
   <select id = "checkAccount" resultType="int">
      select count(*) from account
      where id = #{id}
   </select>
   
   <!-- 계좌 정보를 insert 하는 뭐리 -->
   <insert id="insertAccount">
      insert into account values(#{account},#{bank})
      where id = #{id}
   </insert>
   
   <!-- 계좌정보를 update 하는 쿼리  -->
   <update id="updateAccount">
      update account set account = #{account} , bank=#{bank}
      where id = #{id} 
   </update>
   
   <!-- 파일정보를  insert 하는 메소드  -->
   <insert id="insertUserProfile">
      INSERT INTO FILES ( NO, TYPE, REF, PATH, ORIGIN, RENAMED, EXT, SIZES, THUMBNAIL )
      VALUES ( FILES_SEQ.NEXTVAL, 1, #{id}, 'upload_user', #{origin}, #{rename}, #{ext}, #{sizes}, 0 )
   </insert>
   
   <!-- 파일정보를 삭제하는 메소드  -->
   <delete id="deleteFile">
      delete from files 
      where ref = #{id} and type = 1 
   </delete>
   
   <!-- 파일정보를 가져오는 메소드  -->
   <select id="selectFileList" resultType="Files">
      select * from files
      where ref = #{id} and type = 1
   </select>
   
   <!-- 회원정보를 가져오는 메소드  -->
   <select id="selectUserInfo" resultType="Users">
      select * from users
      where id = #{id}
   </select>
   
   <!-- 회원파일 정보를 가져오는 메소드 -->
   <select id="selectUserFile" resultType="Files">
      select * from files
      where ref = #{id} and type = 1 
   </select>
   
   <!-- 회원 계좌 정보를 가져오는 메소드  -->
   <select id = "selectUserAccount" resultType="Account">
      select * from account
      where id = #{id}
   </select>
   
   <!-- 회원의 포인트를 가져오는 메소드  -->
   <select id="userPoint" resultType="int">
      select point from point_coin
      where id = #{id}      
   </select>
   
   <!-- 회원 코인을 가져오는 메소드  -->
   <select id="userCoin" resultType="int">
      select coin from point_coin
      where id = #{id}      
   </select>
   
   <!-- 포인트 차감하는 메소드-->
   <insert id = "subPoint">
      insert into compensation(id, dates, type, dec) VALUES(#{id}, sysdate + (INTERVAL '9' HOUR) , 1, #{point})
   </insert>
   
   <!-- 게시글을 가져오는 메소드  -->
   <select id="selectUserWritten" resultType="Board">
      select * from ( 
         select rownum rnum, p.* from
         (
            select * from board where id = #{id} 
            ) p      
      )where rnum between #{start} and #{end}
   </select>
   
   
   <!-- 댓글을 가져오는 메소드  -->
   <select id="selectUserComment" resultType="Comments">
      select * from ( 
         select rownum rnum, p.* from
         (
            select * from comments where id = #{id} 
            ) p      
      )where rnum between #{start} and #{end}
   </select>
   
   <!-- 게시글 삭제하는메소드 -->
   <delete id="deleteWritten" >
      delete from board
      where no = #{no}
   </delete>
   
   <!-- 댓글글 삭제하는메소드 -->
   <delete id="deleteComment" >
      delete from comments
      where no = #{no}
   </delete>
   
   <!-- 게시글 총수를 가져오기-->
   <select id = "selectWrittenCnt" resultType="int">
      select count(*) from board
      where id = #{id}
   </select>
   
   <!-- 댓글 총수를 가져오기-->
   <select id = "selectCommentCnt" resultType="int">
      select count(*) from comments
      where id = #{id}
   </select>
   
   <!-- 회원 패스워드를 가져오는 메소드 -->
   <select id="selectUserPw" resultType="String">
      select pw from users
      where id = #{id}
   </select>
	
	
</mapper>  