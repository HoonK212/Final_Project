<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Shopping">
	
	<!-- 쇼핑 홈 출력 아이템 정보 -->
	<resultMap type="map" id="homeItem">
		<result column="code" property="code" />
		<result column="name" property="name"/>
		<result column="company" property="company"/>
		<result column="price" property="price"/>
		<result column="path" property="path"/>
		<result column="renamed" property="renamed"/>
		<result column="ext" property="ext"/>
	</resultMap>
	
	<!-- 쇼핑 장바구니 출력 아이템 정보 -->
	<resultMap type="map" id="basketItem">
		<result column="code" property="code" />
		<result column="name" property="name"/>
		<result column="company" property="company"/>
		<result column="amount" property="amount"/>
		<result column="price" property="price"/>
		<result column="path" property="path"/>
		<result column="renamed" property="renamed"/>
		<result column="ext" property="ext"/>
	</resultMap>

	<!-- 쇼핑 상세페이지 출력 정보 -->
	<resultMap type="map" id="detailItem">
		<result column="code" property="code" />
		<result column="name" property="name"/>
		<result column="price" property="price"/>
		<result column="path" property="path"/>
		<result column="renamed" property="renamed"/>
		<result column="ext" property="ext"/>
		<result column="company" property="company"/>
		<result column="describe" property="describe"/>
		<result column="stock" property="stock"/>
	</resultMap>
	
	<select id="selectHome" parameterType="string" resultMap="homeItem">
		select * from ( select rownum rnum, b.* from (
    		select p.code, name, company, price, path, renamed, ext from product p, files f
    		where p.code = f.ref and p.sell = 1 and p.stock > 0
    		
    		and p.code like #{cate} || '%'
    		
    		order by substr(p.code,2) desc
		) b order by rnum ) t where rnum between 1 and 4
	</select>
	
	<select id="selectCnt" parameterType="int" resultType="int">
	
    		select count(*) from product 
    		where sell = 1 and stock > 0
    		<if test="value == 1">
    			
    		</if>
    		<if test="value == 4">
    			and code like 'A%'
    		</if>
    		<if test="value == 5">
    			and code like 'B%'
    		</if>
    		<if test="value == 6">
    			and code like 'C%'
    		</if>
    		
	</select>
	
	<select id="selectList" resultMap="homeItem">
		select * from ( select rownum rnum, b.* from (
    		select p.code, name, company, price, path, renamed, ext from product p, files f
    		
    		<if test="listno == 2">
    			, (select o.code, sum(amount) as tcnt 
    			from order_product o group by o.code order by tcnt desc) s
    		</if>
    		
    		where p.code = f.ref and p.sell = 1 and p.stock > 0
    		
    		<if test="listno == 1">
    			and p.code = (select code from product_initial)
    		</if>
    		<if test="listno == 2">
    			and p.code = s.code(+)
    		</if>
    		<if test="listno == 4">
    			and p.code like 'A%'
    		</if>
    		<if test="listno == 5">
    			and p.code like 'B%'
    		</if>
    		<if test="listno == 6">
    			and p.code like 'C%'
    		</if>
    		
    		<if test="listno != 2">
	    		order by substr(p.code,2) desc
    		</if>
    		
		) b order by rnum ) t where rnum between #{start} and #{end}
	</select>
	
	<select id="selectBasket" parameterType="map" resultMap="basketItem">
		select p.code, name, amount, price, path, renamed, ext from product p, files f, basket b
		where p.code = f.ref and p.sell = 1 and b.code = p.code 
		and p.stock > 0 and b.id = #{id}
		order by b.dates desc
	</select>
	
	<!-- 세션 장바구니에 추가할 item 정보 추출 -->
	<select id="sessionBasket" parameterType="string" resultMap="basketItem">
		select p.code, name, price, path, renamed, ext from product p, files f, basket b
		where p.code = f.ref and p.sell = 1 and b.code = p.code 
		and p.stock > 0 and p.code = #{value}
		order by b.dates desc
	</select>
	
	<select id="selectProduct" resultMap="basketItem">
		select p.name, p.code, p.company, b.amount, p.price, f.path, f.renamed, f.ext from product p, basket b, files f
        where b.code = p.code and f.ref = p.code
        and stock > 0 and sell = 1 and b.code in
        	<foreach collection="array" item="item" separator="," open="(" close=")">
				#{item}
            </foreach>
		and b.id = #{userId}
        
        
        
        
	</select>
	
	<select id="selectPoint" parameterType="String" resultType="int">
		select NVL(point, 0) point from point_coin
		where id = #{id}
	</select>

	<select id="selectItem" resultMap="detailItem">
		select p.code, name, price, path, renamed, ext, company, describe, stock from product p, files f
		where p.code = f.ref and p.sell = 1 and p.stock > 0
		and p.code = #{value}
		order by substr(p.code,2) desc
	</select>
	
	<select id="checkBasket" resultType="int">
		select count(*) from basket
		where id = #{id} and code = #{code}
	</select>

	<insert id="insertBasket">
		insert into basket 
		values(#{id}, #{code}, #{amount}, sysdate)
	</insert>
	
	<update id="updateAmount">
		update basket set amount = #{amount}
		where id = #{id} and code = #{code}
	</update>
	
	<update id="addAmount">
		update basket set amount = amount + #{amount}
		where id = #{id} and code = #{code}
	</update>
	
	<delete id="deleteBasket">
		delete basket 
		where code=#{code} and id=#{id}
	</delete>
	
	<delete id="deleteList">
		delete basket where id=#{userId} 
		and code in
		<foreach collection="array" item="item" separator="," open="(" close=")">
			#{item}
		</foreach>
	</delete>
	
	<select id="selectOrdersNo" resultType="int">
		select orders_seq.nextval from dual
	</select>
	
	<insert id="insertOrders">
		insert into orders
		values (#{no}, 1, 1, sysdate, #{mUid}, #{id}, #{toName}, #{toTel}, #{toAddr}, #{toPost})
	</insert>
	
	<insert id="insertOrderProduct">
		insert into order_product values (order_product_seq.nextval, #{amount}, #{point}, #{code}, #{ordersNo})
	</insert>
	
	<insert id="insertPoint" parameterType="map">
		insert into compensation values ( #{id}, sysdate, 1, null, 0, #{point} )
	</insert>
</mapper>