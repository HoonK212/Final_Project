const URL = "/resources/motionmodel/legraise/";
let model, webcam, ctx, labelContainer, maxPredictions;

console.log("경로" + URL);

async function init() {
    const modelURL = URL + "model.json";
    const metadataURL = URL + "metadata.json";

    model = await tmPose.load(modelURL, metadataURL);
    maxPredictions = model.getTotalClasses();

    const flip = true;
    webcam = new tmPose.Webcam(512, 480, flip);
    await webcam.setup();
    await webcam.play();
    window.requestAnimationFrame(loop);

    const canvas = document.getElementById("canvas");
    canvas.width = 512; canvas.height = 480;
    ctx = canvas.getContext("2d");
    labelContainer = document.getElementById("label-container");
    for (let i = 0; i < maxPredictions; i++) {
        labelContainer.appendChild(document.createElement("div"));
    }
}

async function loop(timestamp) {
    webcam.update(); // update the webcam frame
    await predict();
    window.requestAnimationFrame(loop);
    
    if(ff == false){
		webcam.pause();
	}
    
}

var status = "legdown"

var count = 0
var set = 0;
var progressCnt = 0
var ff = null;



var exArr = new Array(); 
exArr =	"${exerciseName}".split(",");
for(var i=0; i<exArr.length; i++) {
	console.log(exArr[i])
}


async function predict() {
    const { pose, posenetOutput } = await model.estimatePose(webcam.canvas);
    const prediction = await model.predict(posenetOutput);

    if(prediction[0].probability.toFixed(2) == 1.00) {
    	console.log("레그다운들어옴"+status)
    		
	
    	status = "legdown"
		console.log(status)
    } else if(prediction[1].probability.toFixed(2) == 1.00) {
     	if(status == "legdown") { 
    		count++;
    		progressCnt++;
			
    		console.log("카운터 증가" + count);
    		var audio = new Audio('<%=request.getContextPath() %>/resources/audio/' + count + '.mp3');
    		audio.play()
    		console.log(count)

    		ff = countUpdate(count, set);
    		leftCountUpdate(progressCnt ,exArr[0])
    	}
    	status = "legup"
    	console.log("여기가 업"+status)
    }
    
    
    for (let i = 0; i < maxPredictions; i++) {
        const classPrediction =
        prediction[i].className + ": " + prediction[i].probability.toFixed(2);
        labelContainer.childNodes[i].innerHTML = classPrediction; //여기가 값나오는 부분!
    }

    // finally draw the poses
    drawPose(pose);
}

function drawPose(pose) {
    if (webcam.canvas) {
        ctx.drawImage(webcam.canvas, 0, 0);
        // draw the keypoints and skeleton
        if (pose) {
            const minPartConfidence = 0.5;
            tmPose.drawKeypoints(pose.keypoints, minPartConfidence, ctx);
            tmPose.drawSkeleton(pose.keypoints, minPartConfidence, ctx);
        }
    }
}
init();